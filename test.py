# Elizabeth Yam ey92
# -*- coding: utf-8 -*-
import Latin
import Russian

def testpres():
	print Latin.conjugate("amare","FST","SG","PRES")
	print Latin.conjugate("amare","SND","SG","PRES")
	print Latin.conjugate("amare","TRD","SG","PRES")
	print Latin.conjugate("amare","FST","PL","PRES")
	print Latin.conjugate("amare","SND","PL","PRES")
	print Latin.conjugate("amare","TRD","PL","PRES")
	print()
	print Latin.conjugate("dēlēre","FST","SG","PRES")
	print Latin.conjugate("dēlēre","SND","SG","PRES")
	print Latin.conjugate("dēlēre","TRD","SG","PRES")
	print Latin.conjugate("dēlēre","FST","PL","PRES")
	print Latin.conjugate("dēlēre","SND","PL","PRES")
	print Latin.conjugate("dēlēre","TRD","PL","PRES")
	print()
	print Latin.conjugate("petere","FST","SG","PRES")
	print Latin.conjugate("petere","SND","SG","PRES")
	print Latin.conjugate("petere","TRD","SG","PRES")
	print Latin.conjugate("petere","FST","PL","PRES")
	print Latin.conjugate("petere","SND","PL","PRES")
	print Latin.conjugate("petere","TRD","PL","PRES")
	print()
	print Latin.conjugate("venire","FST","SG","PRES")
	print Latin.conjugate("venire","SND","SG","PRES")
	print Latin.conjugate("venire","TRD","SG","PRES")
	print Latin.conjugate("venire","FST","PL","PRES")
	print Latin.conjugate("venire","SND","PL","PRES")
	print Latin.conjugate("venire","TRD","PL","PRES")
	print()
	print Latin.conjugate("capere","FST","SG","PRES")
	print Latin.conjugate("capere","SND","SG","PRES")
	print Latin.conjugate("capere","TRD","SG","PRES")
	print Latin.conjugate("capere","FST","PL","PRES")
	print Latin.conjugate("capere","SND","PL","PRES")
	print Latin.conjugate("capere","TRD","PL","PRES")

def testimpf():
	print Latin.conjugate("amare","FST","SG","IMPF")
	print Latin.conjugate("amare","SND","SG","IMPF")
	print Latin.conjugate("amare","TRD","SG","IMPF")
	print Latin.conjugate("amare","FST","PL","IMPF")
	print Latin.conjugate("amare","SND","PL","IMPF")
	print Latin.conjugate("amare","TRD","PL","IMPF")
	print()
	print Latin.conjugate("dēlēre","FST","SG","IMPF")
	print Latin.conjugate("dēlēre","SND","SG","IMPF")
	print Latin.conjugate("dēlēre","TRD","SG","IMPF")
	print Latin.conjugate("dēlēre","FST","PL","IMPF")
	print Latin.conjugate("dēlēre","SND","PL","IMPF")
	print Latin.conjugate("dēlēre","TRD","PL","IMPF")
	print()
	print Latin.conjugate("petere","FST","SG","IMPF")
	print Latin.conjugate("petere","SND","SG","IMPF")
	print Latin.conjugate("petere","TRD","SG","IMPF")
	print Latin.conjugate("petere","FST","PL","IMPF")
	print Latin.conjugate("petere","SND","PL","IMPF")
	print Latin.conjugate("petere","TRD","PL","IMPF")
	print()
	print Latin.conjugate("venire","FST","SG","IMPF")
	print Latin.conjugate("venire","SND","SG","IMPF")
	print Latin.conjugate("venire","TRD","SG","IMPF")
	print Latin.conjugate("venire","FST","PL","IMPF")
	print Latin.conjugate("venire","SND","PL","IMPF")
	print Latin.conjugate("venire","TRD","PL","IMPF")
	print()
	print Latin.conjugate("capere","FST","SG","IMPF")
	print Latin.conjugate("capere","SND","SG","IMPF")
	print Latin.conjugate("capere","TRD","SG","IMPF")
	print Latin.conjugate("capere","FST","PL","IMPF")
	print Latin.conjugate("capere","SND","PL","IMPF")
	print Latin.conjugate("capere","TRD","PL","IMPF")

def testfutr():
	print Latin.conjugate("amare","FST","SG","FUTR")
	print Latin.conjugate("amare","SND","SG","FUTR")
	print Latin.conjugate("amare","TRD","SG","FUTR")
	print Latin.conjugate("amare","FST","PL","FUTR")
	print Latin.conjugate("amare","SND","PL","FUTR")
	print Latin.conjugate("amare","TRD","PL","FUTR")
	print()
	print Latin.conjugate("dēlēre","FST","SG","FUTR")
	print Latin.conjugate("dēlēre","SND","SG","FUTR")
	print Latin.conjugate("dēlēre","TRD","SG","FUTR")
	print Latin.conjugate("dēlēre","FST","PL","FUTR")
	print Latin.conjugate("dēlēre","SND","PL","FUTR")
	print Latin.conjugate("dēlēre","TRD","PL","FUTR")
	print()
	print Latin.conjugate("petere","FST","SG","FUTR")
	print Latin.conjugate("petere","SND","SG","FUTR")
	print Latin.conjugate("petere","TRD","SG","FUTR")
	print Latin.conjugate("petere","FST","PL","FUTR")
	print Latin.conjugate("petere","SND","PL","FUTR")
	print Latin.conjugate("petere","TRD","PL","FUTR")
	print()
	print Latin.conjugate("venire","FST","SG","FUTR")
	print Latin.conjugate("venire","SND","SG","FUTR")
	print Latin.conjugate("venire","TRD","SG","FUTR")
	print Latin.conjugate("venire","FST","PL","FUTR")
	print Latin.conjugate("venire","SND","PL","FUTR")
	print Latin.conjugate("venire","TRD","PL","FUTR")
	print()
	print Latin.conjugate("capere","FST","SG","FUTR")
	print Latin.conjugate("capere","SND","SG","FUTR")
	print Latin.conjugate("capere","TRD","SG","FUTR")
	print Latin.conjugate("capere","FST","PL","FUTR")
	print Latin.conjugate("capere","SND","PL","FUTR")
	print Latin.conjugate("capere","TRD","PL","FUTR")

def testperf():
	print Latin.conjugate("amare","FST","SG","PERF")
	print Latin.conjugate("amare","SND","SG","PERF")
	print Latin.conjugate("amare","TRD","SG","PERF")
	print Latin.conjugate("amare","FST","PL","PERF")
	print Latin.conjugate("amare","SND","PL","PERF")
	print Latin.conjugate("amare","TRD","PL","PERF")
	print()
	print Latin.conjugate("dēlēre","FST","SG","PERF")
	print Latin.conjugate("dēlēre","SND","SG","PERF")
	print Latin.conjugate("dēlēre","TRD","SG","PERF")
	print Latin.conjugate("dēlēre","FST","PL","PERF")
	print Latin.conjugate("dēlēre","SND","PL","PERF")
	print Latin.conjugate("dēlēre","TRD","PL","PERF")
	print()
	print Latin.conjugate("petere","FST","SG","PERF")
	print Latin.conjugate("petere","SND","SG","PERF")
	print Latin.conjugate("petere","TRD","SG","PERF")
	print Latin.conjugate("petere","FST","PL","PERF")
	print Latin.conjugate("petere","SND","PL","PERF")
	print Latin.conjugate("petere","TRD","PL","PERF")
	print()
	print Latin.conjugate("venire","FST","SG","PERF")
	print Latin.conjugate("venire","SND","SG","PERF")
	print Latin.conjugate("venire","TRD","SG","PERF")
	print Latin.conjugate("venire","FST","PL","PERF")
	print Latin.conjugate("venire","SND","PL","PERF")
	print Latin.conjugate("venire","TRD","PL","PERF")
	print()
	print Latin.conjugate("capere","FST","SG","PERF")
	print Latin.conjugate("capere","SND","SG","PERF")
	print Latin.conjugate("capere","TRD","SG","PERF")
	print Latin.conjugate("capere","FST","PL","PERF")
	print Latin.conjugate("capere","SND","PL","PERF")
	print Latin.conjugate("capere","TRD","PL","PERF")

def testplup():
	print Latin.conjugate("amare","FST","SG","PLUP")
	print Latin.conjugate("amare","SND","SG","PLUP")
	print Latin.conjugate("amare","TRD","SG","PLUP")
	print Latin.conjugate("amare","FST","PL","PLUP")
	print Latin.conjugate("amare","SND","PL","PLUP")
	print Latin.conjugate("amare","TRD","PL","PLUP")
	print()
	print Latin.conjugate("dēlēre","FST","SG","PLUP")
	print Latin.conjugate("dēlēre","SND","SG","PLUP")
	print Latin.conjugate("dēlēre","TRD","SG","PLUP")
	print Latin.conjugate("dēlēre","FST","PL","PLUP")
	print Latin.conjugate("dēlēre","SND","PL","PLUP")
	print Latin.conjugate("dēlēre","TRD","PL","PLUP")
	print()
	print Latin.conjugate("petere","FST","SG","PLUP")
	print Latin.conjugate("petere","SND","SG","PLUP")
	print Latin.conjugate("petere","TRD","SG","PLUP")
	print Latin.conjugate("petere","FST","PL","PLUP")
	print Latin.conjugate("petere","SND","PL","PLUP")
	print Latin.conjugate("petere","TRD","PL","PLUP")
	print()
	print Latin.conjugate("venire","FST","SG","PLUP")
	print Latin.conjugate("venire","SND","SG","PLUP")
	print Latin.conjugate("venire","TRD","SG","PLUP")
	print Latin.conjugate("venire","FST","PL","PLUP")
	print Latin.conjugate("venire","SND","PL","PLUP")
	print Latin.conjugate("venire","TRD","PL","PLUP")
	print()
	print Latin.conjugate("capere","FST","SG","PLUP")
	print Latin.conjugate("capere","SND","SG","PLUP")
	print Latin.conjugate("capere","TRD","SG","PLUP")
	print Latin.conjugate("capere","FST","PL","PLUP")
	print Latin.conjugate("capere","SND","PL","PLUP")
	print Latin.conjugate("capere","TRD","PL","PLUP")

def testfutp():
	print Latin.conjugate("amare","FST","SG","FUTP")
	print Latin.conjugate("amare","SND","SG","FUTP")
	print Latin.conjugate("amare","TRD","SG","FUTP")
	print Latin.conjugate("amare","FST","PL","FUTP")
	print Latin.conjugate("amare","SND","PL","FUTP")
	print Latin.conjugate("amare","TRD","PL","FUTP")
	print()
	print Latin.conjugate("dēlēre","FST","SG","FUTP")
	print Latin.conjugate("dēlēre","SND","SG","FUTP")
	print Latin.conjugate("dēlēre","TRD","SG","FUTP")
	print Latin.conjugate("dēlēre","FST","PL","FUTP")
	print Latin.conjugate("dēlēre","SND","PL","FUTP")
	print Latin.conjugate("dēlēre","TRD","PL","FUTP")
	print()
	print Latin.conjugate("petere","FST","SG","FUTP")
	print Latin.conjugate("petere","SND","SG","FUTP")
	print Latin.conjugate("petere","TRD","SG","FUTP")
	print Latin.conjugate("petere","FST","PL","FUTP")
	print Latin.conjugate("petere","SND","PL","FUTP")
	print Latin.conjugate("petere","TRD","PL","FUTP")
	print()
	print Latin.conjugate("venire","FST","SG","FUTP")
	print Latin.conjugate("venire","SND","SG","FUTP")
	print Latin.conjugate("venire","TRD","SG","FUTP")
	print Latin.conjugate("venire","FST","PL","FUTP")
	print Latin.conjugate("venire","SND","PL","FUTP")
	print Latin.conjugate("venire","TRD","PL","FUTP")
	print()
	print Latin.conjugate("capere","FST","SG","FUTP")
	print Latin.conjugate("capere","SND","SG","FUTP")
	print Latin.conjugate("capere","TRD","SG","FUTP")
	print Latin.conjugate("capere","FST","PL","FUTP")
	print Latin.conjugate("capere","SND","PL","FUTP")
	print Latin.conjugate("capere","TRD","PL","FUTP")

def testrev3P():
	print Latin.reverseConjugate("amant")
	print Latin.reverseConjugate("amabant")
	print Latin.reverseConjugate("amabunt")
	print Latin.reverseConjugate("amāverunt")
	print Latin.reverseConjugate("amāverant")
	print Latin.reverseConjugate("amāverint")

	print Latin.reverseConjugate("dēlent")
	print Latin.reverseConjugate("dēlēbant")
	print Latin.reverseConjugate("dēlēbunt")
	print Latin.reverseConjugate("dēlēverunt")
	print Latin.reverseConjugate("dēlēverant")
	print Latin.reverseConjugate("dēlēverint")

	print Latin.reverseConjugate("petunt")
	print Latin.reverseConjugate("petebant")
	print Latin.reverseConjugate("petent")
	print Latin.reverseConjugate("petīverunt")
	print Latin.reverseConjugate("petīverant")
	print Latin.reverseConjugate("petīverint")

	print Latin.reverseConjugate("veniunt")
	print Latin.reverseConjugate("veniebant")
	print Latin.reverseConjugate("venient")
	print Latin.reverseConjugate("vēnerunt")
	print Latin.reverseConjugate("vēnerant")
	print Latin.reverseConjugate("vēnerint")

	print Latin.reverseConjugate("capiunt")
	print Latin.reverseConjugate("capiebant")
	print Latin.reverseConjugate("capient")
	print Latin.reverseConjugate("cēperunt")
	print Latin.reverseConjugate("cēperant")
	print Latin.reverseConjugate("cēperint")

def testrev3S():
	print Latin.reverseConjugate("amat")
	print Latin.reverseConjugate("amabat")
	print Latin.reverseConjugate("amabit")
	print Latin.reverseConjugate("amāvit")
	print Latin.reverseConjugate("amāverat")
	print Latin.reverseConjugate("amāverit")

	print Latin.reverseConjugate("dēlet")
	print Latin.reverseConjugate("dēlēbat")
	print Latin.reverseConjugate("dēlēbit")
	print Latin.reverseConjugate("dēlēvit")
	print Latin.reverseConjugate("dēlēverat")
	print Latin.reverseConjugate("dēlēverit")

	print Latin.reverseConjugate("petit")
	print Latin.reverseConjugate("petebat")
	print Latin.reverseConjugate("petet")
	print Latin.reverseConjugate("petīvit")
	print Latin.reverseConjugate("petīverat")
	print Latin.reverseConjugate("petīverit")

	print Latin.reverseConjugate("venit")
	print Latin.reverseConjugate("veniebat")
	print Latin.reverseConjugate("veniet")
	print Latin.reverseConjugate("vēnit")
	print Latin.reverseConjugate("vēnerat")
	print Latin.reverseConjugate("vēnerit")

	print Latin.reverseConjugate("capit")
	print Latin.reverseConjugate("capiebat")
	print Latin.reverseConjugate("capiet")
	print Latin.reverseConjugate("cēpit")
	print Latin.reverseConjugate("cēperat")
	print Latin.reverseConjugate("cēperit")

def testrev2P():
	print Latin.reverseConjugate("amatis")
	print Latin.reverseConjugate("amabatis")
	print Latin.reverseConjugate("amabitis")
	print Latin.reverseConjugate("amāvistis")
	print Latin.reverseConjugate("amāveratis")
	print Latin.reverseConjugate("amāveritis")

	print Latin.reverseConjugate("dēletis")
	print Latin.reverseConjugate("dēlēbatis")
	print Latin.reverseConjugate("dēlēbitis")
	print Latin.reverseConjugate("dēlēvistis")
	print Latin.reverseConjugate("dēlēveratis")
	print Latin.reverseConjugate("dēlēveritis")

	print Latin.reverseConjugate("petitis")
	print Latin.reverseConjugate("petebatis")
	print Latin.reverseConjugate("petetis")
	print Latin.reverseConjugate("petīvistis")
	print Latin.reverseConjugate("petīveratis")
	print Latin.reverseConjugate("petīveritis")

	print Latin.reverseConjugate("venitis")
	print Latin.reverseConjugate("veniebatis")
	print Latin.reverseConjugate("venietis")
	print Latin.reverseConjugate("vēnistis")
	print Latin.reverseConjugate("vēneratis")
	print Latin.reverseConjugate("vēneritis")

	print Latin.reverseConjugate("capitis")
	print Latin.reverseConjugate("capiebatis")
	print Latin.reverseConjugate("capietis")
	print Latin.reverseConjugate("cēpistis")
	print Latin.reverseConjugate("cēperatis")
	print Latin.reverseConjugate("cēperitis")

def testrev2S():
	print Latin.reverseConjugate("amas")
	print Latin.reverseConjugate("amabas")
	print Latin.reverseConjugate("amabis")
	# print Latin.findTense2S("amāvisti",'SND','SG',False)
	print Latin.reverseConjugate("amāvisti")
	print Latin.reverseConjugate("amāveras")
	print Latin.reverseConjugate("amāveris")

	print Latin.reverseConjugate("dēles")
	print Latin.reverseConjugate("dēlēbas")
	print Latin.reverseConjugate("dēlēbis")
	print Latin.reverseConjugate("dēlēvisti")
	print Latin.reverseConjugate("dēlēveras")
	print Latin.reverseConjugate("dēlēveris")

	print Latin.reverseConjugate("petis")
	print Latin.reverseConjugate("petebas")
	print Latin.reverseConjugate("petes")
	print Latin.reverseConjugate("petīvisti")
	print Latin.reverseConjugate("petīveras")
	print Latin.reverseConjugate("petīveris")

	print Latin.reverseConjugate("venis")
	print Latin.reverseConjugate("veniebas")
	print Latin.reverseConjugate("venies")
	print Latin.reverseConjugate("vēnisti")
	print Latin.reverseConjugate("vēneras")
	print Latin.reverseConjugate("vēneris")

	print Latin.reverseConjugate("capis")
	print Latin.reverseConjugate("capiebas")
	print Latin.reverseConjugate("capies")
	print Latin.reverseConjugate("cēpisti")
	print Latin.reverseConjugate("cēperas")
	print Latin.reverseConjugate("cēperis")

def testrev1P():
	print Latin.reverseConjugate("amamus")
	print Latin.reverseConjugate("amabamus")
	print Latin.reverseConjugate("amabimus")
	print Latin.reverseConjugate("amāvimus")
	print Latin.reverseConjugate("amāveramus")
	print Latin.reverseConjugate("amāverimus")

	print Latin.reverseConjugate("dēlemus")
	print Latin.reverseConjugate("dēlēbamus")
	print Latin.reverseConjugate("dēlēbimus")
	print Latin.reverseConjugate("dēlēvimus")
	print Latin.reverseConjugate("dēlēveramus")
	print Latin.reverseConjugate("dēlēverimus")

	print Latin.reverseConjugate("petimus")
	print Latin.reverseConjugate("petebamus")
	print Latin.reverseConjugate("petemus")
	print Latin.reverseConjugate("petīvimus")
	print Latin.reverseConjugate("petīveramus")
	print Latin.reverseConjugate("petīverimus")

	print Latin.reverseConjugate("venimus")
	print Latin.reverseConjugate("veniebamus")
	print Latin.reverseConjugate("veniemus")
	print Latin.reverseConjugate("vēnimus")
	print Latin.reverseConjugate("vēneramus")
	print Latin.reverseConjugate("vēnerimus")

	print Latin.reverseConjugate("capimus")
	print Latin.reverseConjugate("capiebamus")
	print Latin.reverseConjugate("capiemus")
	print Latin.reverseConjugate("cēpimus")
	print Latin.reverseConjugate("cēperamus")
	print Latin.reverseConjugate("cēperimus")

def testrev1S():
	print Latin.reverseConjugate("amo")
	print Latin.reverseConjugate("amabam")
	print Latin.reverseConjugate("amabo")
	print Latin.reverseConjugate("amāvī")
	print Latin.reverseConjugate("amāveram")
	print Latin.reverseConjugate("amāvero")

	print Latin.reverseConjugate("dēleo")
	print Latin.reverseConjugate("dēlēbam")
	print Latin.reverseConjugate("dēlēbo")
	print Latin.reverseConjugate("dēlēvī")
	print Latin.reverseConjugate("dēlēveram")
	print Latin.reverseConjugate("dēlēvero")

	print Latin.reverseConjugate("peto")
	print Latin.reverseConjugate("petebam")
	print Latin.reverseConjugate("petam")
	print Latin.reverseConjugate("petīvī")
	print Latin.reverseConjugate("petīveram")
	print Latin.reverseConjugate("petīvero")

	print Latin.reverseConjugate("venio")
	print Latin.reverseConjugate("veniebam")
	print Latin.reverseConjugate("veniam")
	print Latin.reverseConjugate("vēnī")
	print Latin.reverseConjugate("vēneram")
	print Latin.reverseConjugate("vēnero")

	print Latin.reverseConjugate("capio")
	print Latin.reverseConjugate("capiebam")
	print Latin.reverseConjugate("capiam")
	print Latin.reverseConjugate("cēpī")
	print Latin.reverseConjugate("cēperam")
	print Latin.reverseConjugate("cēpero")

# if __name__ == "__main__": main()
# testpres()
# print("---------")
# testimpf()
# print("---------")
# testfutr()
# print("---------")
# testperf()
# print("---------")
# testplup()
# print("---------")
# testfutp()

# testrev3P()
# print("---------")
# testrev3S()
# print("---------")
# testrev2P()
# print("---------")
# testrev2S()
# print("---------")
# testrev1P()
# print("---------")
# testrev1S()

def test1D():
	print Latin.decline("puella","puellae","NOM","SG","1","F")
	print Latin.decline("puella","puellae","GEN","SG","1","F")
	print Latin.decline("puella","puellae","DAT","SG","1","F")
	print Latin.decline("puella","puellae","ACC","SG","1","F")
	print Latin.decline("puella","puellae","ABL","SG","1","F")
	print Latin.decline("puella","puellae","VOC","SG","1","F")
	print Latin.decline("puella","puellae","NOM","PL","1","F")
	print Latin.decline("puella","puellae","GEN","PL","1","F")
	print Latin.decline("puella","puellae","DAT","PL","1","F")
	print Latin.decline("puella","puellae","ACC","PL","1","F")
	print Latin.decline("puella","puellae","ABL","PL","1","F")
	print Latin.decline("puella","puellae","VOC","PL","1","F")
	print("---------")
	print Latin.decline("agricola","agricolae","NOM","SG","1","M")
	print Latin.decline("agricola","agricolae","GEN","SG","1","M")
	print Latin.decline("agricola","agricolae","DAT","SG","1","M")
	print Latin.decline("agricola","agricolae","ACC","SG","1","M")
	print Latin.decline("agricola","agricolae","ABL","SG","1","M")
	print Latin.decline("agricola","agricolae","VOC","SG","1","M")
	print Latin.decline("agricola","agricolae","NOM","PL","1","M")
	print Latin.decline("agricola","agricolae","GEN","PL","1","M")
	print Latin.decline("agricola","agricolae","DAT","PL","1","M")
	print Latin.decline("agricola","agricolae","ACC","PL","1","M")
	print Latin.decline("agricola","agricolae","ABL","PL","1","M")
	print Latin.decline("agricola","agricolae","VOC","PL","1","M")

def test2D():
	print Latin.decline("puer","puerī","NOM","SG","2","M")
	print Latin.decline("puer","puerī","GEN","SG","2","M")
	print Latin.decline("puer","puerī","DAT","SG","2","M")
	print Latin.decline("puer","puerī","ACC","SG","2","M")
	print Latin.decline("puer","puerī","ABL","SG","2","M")
	print Latin.decline("puer","puerī","VOC","SG","2","M")
	print Latin.decline("puer","puerī","NOM","PL","2","M")
	print Latin.decline("puer","puerī","GEN","PL","2","M")
	print Latin.decline("puer","puerī","DAT","PL","2","M")
	print Latin.decline("puer","puerī","ACC","PL","2","M")
	print Latin.decline("puer","puerī","ABL","PL","2","M")
	print Latin.decline("puer","puerī","VOC","PL","2","M")
	print("---------")
	print Latin.decline("filius","filiī","NOM","SG","2","M")
	print Latin.decline("filius","filiī","GEN","SG","2","M")
	print Latin.decline("filius","filiī","DAT","SG","2","M")
	print Latin.decline("filius","filiī","ACC","SG","2","M")
	print Latin.decline("filius","filiī","ABL","SG","2","M")
	print Latin.decline("filius","filiī","VOC","SG","2","M")
	print Latin.decline("filius","filiī","NOM","PL","2","M")
	print Latin.decline("filius","filiī","GEN","PL","2","M")
	print Latin.decline("filius","filiī","DAT","PL","2","M")
	print Latin.decline("filius","filiī","ACC","PL","2","M")
	print Latin.decline("filius","filiī","ABL","PL","2","M")
	print Latin.decline("filius","filiī","VOC","PL","2","M")
	print("---------")
	print Latin.decline("mūrus","mūrī","NOM","SG","2","M")
	print Latin.decline("mūrus","mūrī","GEN","SG","2","M")
	print Latin.decline("mūrus","mūrī","DAT","SG","2","M")
	print Latin.decline("mūrus","mūrī","ACC","SG","2","M")
	print Latin.decline("mūrus","mūrī","ABL","SG","2","M")
	print Latin.decline("mūrus","mūrī","VOC","SG","2","M")
	print Latin.decline("mūrus","mūrī","NOM","PL","2","M")
	print Latin.decline("mūrus","mūrī","GEN","PL","2","M")
	print Latin.decline("mūrus","mūrī","DAT","PL","2","M")
	print Latin.decline("mūrus","mūrī","ACC","PL","2","M")
	print Latin.decline("mūrus","mūrī","ABL","PL","2","M")
	print Latin.decline("mūrus","mūrī","VOC","PL","2","M")
	print("---------")
	print Latin.decline("bellum","bellī","NOM","SG","2","N")
	print Latin.decline("bellum","bellī","GEN","SG","2","N")
	print Latin.decline("bellum","bellī","DAT","SG","2","N")
	print Latin.decline("bellum","bellī","ACC","SG","2","N")
	print Latin.decline("bellum","bellī","ABL","SG","2","N")
	print Latin.decline("bellum","bellī","VOC","SG","2","N")
	print Latin.decline("bellum","bellī","NOM","PL","2","N")
	print Latin.decline("bellum","bellī","GEN","PL","2","N")
	print Latin.decline("bellum","bellī","DAT","PL","2","N")
	print Latin.decline("bellum","bellī","ACC","PL","2","N")
	print Latin.decline("bellum","bellī","ABL","PL","2","N")
	print Latin.decline("bellum","bellī","VOC","PL","2","N")

def test3D():
	print Latin.decline("homō","hominis","NOM","SG","3  ","M")
	print Latin.decline("homō","hominis","GEN","SG","3  ","M")
	print Latin.decline("homō","hominis","DAT","SG","3  ","M")
	print Latin.decline("homō","hominis","ACC","SG","3  ","M")
	print Latin.decline("homō","hominis","ABL","SG","3  ","M")
	print Latin.decline("homō","hominis","VOC","SG","3  ","M")
	print Latin.decline("homō","hominis","NOM","PL","3  ","M")
	print Latin.decline("homō","hominis","GEN","PL","3  ","M")
	print Latin.decline("homō","hominis","DAT","PL","3  ","M")
	print Latin.decline("homō","hominis","ACC","PL","3  ","M")
	print Latin.decline("homō","hominis","ABL","PL","3  ","M")
	print Latin.decline("homō","hominis","VOC","PL","3  ","M")
	print("---------")
	print Latin.decline("flūmen","flūminis","NOM","SG","3  ","N")
	print Latin.decline("flūmen","flūminis","GEN","SG","3  ","N")
	print Latin.decline("flūmen","flūminis","DAT","SG","3  ","N")
	print Latin.decline("flūmen","flūminis","ACC","SG","3  ","N")
	print Latin.decline("flūmen","flūminis","ABL","SG","3  ","N")
	print Latin.decline("flūmen","flūminis","VOC","SG","3  ","N")
	print Latin.decline("flūmen","flūminis","NOM","PL","3  ","N")
	print Latin.decline("flūmen","flūminis","GEN","PL","3  ","N")
	print Latin.decline("flūmen","flūminis","DAT","PL","3  ","N")
	print Latin.decline("flūmen","flūminis","ACC","PL","3  ","N")
	print Latin.decline("flūmen","flūminis","ABL","PL","3  ","N")
	print Latin.decline("flūmen","flūminis","VOC","PL","3  ","N")
	print("---------")
	print Latin.decline("urbs","urbis","NOM","SG","3i ","F")
	print Latin.decline("urbs","urbis","GEN","SG","3i ","F")
	print Latin.decline("urbs","urbis","DAT","SG","3i ","F")
	print Latin.decline("urbs","urbis","ACC","SG","3i ","F")
	print Latin.decline("urbs","urbis","ABL","SG","3i ","F")
	print Latin.decline("urbs","urbis","VOC","SG","3i ","F")
	print Latin.decline("urbs","urbis","NOM","PL","3i ","F")
	print Latin.decline("urbs","urbis","GEN","PL","3i ","F")
	print Latin.decline("urbs","urbis","DAT","PL","3i ","F")
	print Latin.decline("urbs","urbis","ACC","PL","3i ","F")
	print Latin.decline("urbs","urbis","ABL","PL","3i ","F")
	print Latin.decline("urbs","urbis","VOC","PL","3i ","F")
	print("---------")
	print Latin.decline("mare","maris","NOM","SG","3ii","N")
	print Latin.decline("mare","maris","GEN","SG","3ii","N")
	print Latin.decline("mare","maris","DAT","SG","3ii","N")
	print Latin.decline("mare","maris","ACC","SG","3ii","N")
	print Latin.decline("mare","maris","ABL","SG","3ii","N")
	print Latin.decline("mare","maris","VOC","SG","3ii","N")
	print Latin.decline("mare","maris","NOM","PL","3ii","N")
	print Latin.decline("mare","maris","GEN","PL","3ii","N")
	print Latin.decline("mare","maris","DAT","PL","3ii","N")
	print Latin.decline("mare","maris","ACC","PL","3ii","N")
	print Latin.decline("mare","maris","ABL","PL","3ii","N")
	print Latin.decline("mare","maris","VOC","PL","3ii","N")

def test4D():
	print Latin.decline("manus","manūs","NOM","SG","4","F")
	print Latin.decline("manus","manūs","GEN","SG","4","F")
	print Latin.decline("manus","manūs","DAT","SG","4","F")
	print Latin.decline("manus","manūs","ACC","SG","4","F")
	print Latin.decline("manus","manūs","ABL","SG","4","F")
	print Latin.decline("manus","manūs","VOC","SG","4","F")
	print Latin.decline("manus","manūs","NOM","PL","4","F")
	print Latin.decline("manus","manūs","GEN","PL","4","F")
	print Latin.decline("manus","manūs","DAT","PL","4","F")
	print Latin.decline("manus","manūs","ACC","PL","4","F")
	print Latin.decline("manus","manūs","ABL","PL","4","F")
	print Latin.decline("manus","manūs","VOC","PL","4","F")
	print("---------")
	print Latin.decline("cornū","cornūs","NOM","SG","4","N")
	print Latin.decline("cornū","cornūs","GEN","SG","4","N")
	print Latin.decline("cornū","cornūs","DAT","SG","4","N")
	print Latin.decline("cornū","cornūs","ACC","SG","4","N")
	print Latin.decline("cornū","cornūs","ABL","SG","4","N")
	print Latin.decline("cornū","cornūs","VOC","SG","4","N")
	print Latin.decline("cornū","cornūs","NOM","PL","4","N")
	print Latin.decline("cornū","cornūs","GEN","PL","4","N")
	print Latin.decline("cornū","cornūs","DAT","PL","4","N")
	print Latin.decline("cornū","cornūs","ACC","PL","4","N")
	print Latin.decline("cornū","cornūs","ABL","PL","4","N")
	print Latin.decline("cornū","cornūs","VOC","PL","4","N")

def test5D():
	print Latin.decline("rēs","reī","NOM","SG","5","F")
	print Latin.decline("rēs","reī","GEN","SG","5","F")
	print Latin.decline("rēs","reī","DAT","SG","5","F")
	print Latin.decline("rēs","reī","ACC","SG","5","F")
	print Latin.decline("rēs","reī","ABL","SG","5","F")
	print Latin.decline("rēs","reī","VOC","SG","5","F")
	print Latin.decline("rēs","reī","NOM","PL","5","F")
	print Latin.decline("rēs","reī","GEN","PL","5","F")
	print Latin.decline("rēs","reī","DAT","PL","5","F")
	print Latin.decline("rēs","reī","ACC","PL","5","F")
	print Latin.decline("rēs","reī","ABL","PL","5","F")
	print Latin.decline("rēs","reī","VOC","PL","5","F")
	print("---------")
	print Latin.decline("diēs","diēī","NOM","SG","5","N")
	print Latin.decline("diēs","diēī","GEN","SG","5","N")
	print Latin.decline("diēs","diēī","DAT","SG","5","N")
	print Latin.decline("diēs","diēī","ACC","SG","5","N")
	print Latin.decline("diēs","diēī","ABL","SG","5","N")
	print Latin.decline("diēs","diēī","VOC","SG","5","N")
	print Latin.decline("diēs","diēī","NOM","PL","5","N")
	print Latin.decline("diēs","diēī","GEN","PL","5","N")
	print Latin.decline("diēs","diēī","DAT","PL","5","N")
	print Latin.decline("diēs","diēī","ACC","PL","5","N")
	print Latin.decline("diēs","diēī","ABL","PL","5","N")
	print Latin.decline("diēs","diēī","VOC","PL","5","N")

def testrevDAP():
	print Latin.reverseDecline("puellīs")
	print Latin.reverseDecline("puerīs")
	print Latin.reverseDecline("servīs")
	print Latin.reverseDecline("bellīs")
	print Latin.reverseDecline("hominibus")
	print Latin.reverseDecline("nōminibus")
	print Latin.reverseDecline("manibus")
	print Latin.reverseDecline("cornibus")
	print Latin.reverseDecline("rēbus")

def testrevDAS():
	print ("* "); print Latin.reverseDecline("puellae")
	print Latin.reverseDecline("puellā")
	print Latin.reverseDecline("puerō")
	print Latin.reverseDecline("servō")
	print Latin.reverseDecline("bellō")
	print Latin.reverseDecline("hominī")
	print Latin.reverseDecline("homine")
	print Latin.reverseDecline("nōminī")
	print Latin.reverseDecline("nōmine")
	print Latin.reverseDecline("manuī")
	print Latin.reverseDecline("manū")
	print Latin.reverseDecline("cornū")
	print ("* "); print Latin.reverseDecline("rēī")
	print Latin.reverseDecline("rē")
	print ("voc* "); print Latin.reverseDecline("serve")

def testrevGenP():
	print Latin.reverseDecline("puellārum")
	print Latin.reverseDecline("puerōrum")
	print Latin.reverseDecline("servōrum")
	print Latin.reverseDecline("bellōrum")
	print Latin.reverseDecline("hominum")
	print Latin.reverseDecline("animālium")
	print Latin.reverseDecline("manuum")
	print Latin.reverseDecline("cornuum")
	print Latin.reverseDecline("rērum")

def testrevGenS():
	print ("* "); print Latin.reverseDecline("puellae")
	print ("* "); print Latin.reverseDecline("puerī")
	print ("* "); print Latin.reverseDecline("servī")
	print Latin.reverseDecline("bellī")
	print Latin.reverseDecline("hominis")
	print Latin.reverseDecline("animālis")
	print ("* "); print Latin.reverseDecline("manūs")
	print ("* "); print Latin.reverseDecline("cornūs")
	print Latin.reverseDecline("rēī")

def testrevNomAccP():
	print Latin.reverseDecline("puellae")
	print Latin.reverseDecline("puellās")
	print Latin.reverseDecline("puerī")
	print Latin.reverseDecline("puerōs")
	print Latin.reverseDecline("servī")
	print Latin.reverseDecline("servōs")
	print Latin.reverseDecline("bella")
	print Latin.reverseDecline("hominēs")
	print Latin.reverseDecline("animālia")
	print Latin.reverseDecline("manūs")
	print Latin.reverseDecline("cornua")
	print Latin.reverseDecline("rēs")

def testrevAccS():
	print Latin.reverseDecline("puellam")
	print Latin.reverseDecline("puerum")
	print Latin.reverseDecline("servum")
	print ("* "); print Latin.reverseDecline("bellum")
	print Latin.reverseDecline("hominem")
	print ("* "); print Latin.reverseDecline("animal")
	print Latin.reverseDecline("manum")
	print ("* "); print Latin.reverseDecline("cornū")
	print Latin.reverseDecline("rem")

def testrevNomS():
	print Latin.reverseDecline("puella")
	print Latin.reverseDecline("puer")
	print Latin.reverseDecline("servus")
	print Latin.reverseDecline("bellum")
	print Latin.reverseDecline("homō")
	print Latin.reverseDecline("animal")
	print Latin.reverseDecline("manus")
	print Latin.reverseDecline("cornū")
	print Latin.reverseDecline("rēs")

test1D()
print("---------")
test2D()
print("---------")
test3D()
print("---------")
test4D()
print("---------")
test5D()

# testrevDAP()
# print("---------")
# testrevDAS()
# print("---------")
# testrevGenP()
# print("---------")
# testrevGenS()
# print("---------")
# testrevNomAccP()
# print("---------")
# testrevAccS()
# print("---------")
# testrevNomS()

def testDA12():
		print Latin.declineA('pulcher','pulchra','12','F','NOM','SG')
		print Latin.declineA('pulcher','pulchra','12','F','GEN','SG')
		print Latin.declineA('pulcher','pulchra','12','F','DAT','SG')
		print Latin.declineA('pulcher','pulchra','12','F','ACC','SG')
		print Latin.declineA('pulcher','pulchra','12','F','ABL','SG')
		print Latin.declineA('pulcher','pulchra','12','F','VOC','SG')
		print Latin.declineA('pulcher','pulchra','12','F','NOM','PL')
		print Latin.declineA('pulcher','pulchra','12','F','GEN','PL')
		print Latin.declineA('pulcher','pulchra','12','F','DAT','PL')
		print Latin.declineA('pulcher','pulchra','12','F','ACC','PL')
		print Latin.declineA('pulcher','pulchra','12','F','ABL','PL')
		print Latin.declineA('pulcher','pulchra','12','F','VOC','PL')
		print("---------")
		print Latin.declineA('pulcher','pulchra','12','M','NOM','SG')
		print Latin.declineA('pulcher','pulchra','12','M','GEN','SG')
		print Latin.declineA('pulcher','pulchra','12','M','DAT','SG')
		print Latin.declineA('pulcher','pulchra','12','M','ACC','SG')
		print Latin.declineA('pulcher','pulchra','12','M','ABL','SG')
		print Latin.declineA('pulcher','pulchra','12','M','VOC','SG')
		print Latin.declineA('pulcher','pulchra','12','M','NOM','PL')
		print Latin.declineA('pulcher','pulchra','12','M','GEN','PL')
		print Latin.declineA('pulcher','pulchra','12','M','DAT','PL')
		print Latin.declineA('pulcher','pulchra','12','M','ACC','PL')
		print Latin.declineA('pulcher','pulchra','12','M','ABL','PL')
		print Latin.declineA('pulcher','pulchra','12','M','VOC','PL')
		print("---------")
		print Latin.declineA('pulcher','pulchra','12','N','NOM','SG')
		print Latin.declineA('pulcher','pulchra','12','N','GEN','SG')
		print Latin.declineA('pulcher','pulchra','12','N','DAT','SG')
		print Latin.declineA('pulcher','pulchra','12','N','ACC','SG')
		print Latin.declineA('pulcher','pulchra','12','N','ABL','SG')
		print Latin.declineA('pulcher','pulchra','12','N','VOC','SG')
		print Latin.declineA('pulcher','pulchra','12','N','NOM','PL')
		print Latin.declineA('pulcher','pulchra','12','N','GEN','PL')
		print Latin.declineA('pulcher','pulchra','12','N','DAT','PL')
		print Latin.declineA('pulcher','pulchra','12','N','ACC','PL')
		print Latin.declineA('pulcher','pulchra','12','N','ABL','PL')
		print Latin.declineA('pulcher','pulchra','12','N','VOC','PL')
		print("---------")
		print("---------")
		print Latin.declineA('bonus','bona','12','F','NOM','SG')
		print Latin.declineA('bonus','bona','12','F','GEN','SG')
		print Latin.declineA('bonus','bona','12','F','DAT','SG')
		print Latin.declineA('bonus','bona','12','F','ACC','SG')
		print Latin.declineA('bonus','bona','12','F','ABL','SG')
		print Latin.declineA('bonus','bona','12','F','VOC','SG')
		print Latin.declineA('bonus','bona','12','F','NOM','PL')
		print Latin.declineA('bonus','bona','12','F','GEN','PL')
		print Latin.declineA('bonus','bona','12','F','DAT','PL')
		print Latin.declineA('bonus','bona','12','F','ACC','PL')
		print Latin.declineA('bonus','bona','12','F','ABL','PL')
		print Latin.declineA('bonus','bona','12','F','VOC','PL')
		print("---------")
		print Latin.declineA('bonus','bona','12','M','NOM','SG')
		print Latin.declineA('bonus','bona','12','M','GEN','SG')
		print Latin.declineA('bonus','bona','12','M','DAT','SG')
		print Latin.declineA('bonus','bona','12','M','ACC','SG')
		print Latin.declineA('bonus','bona','12','M','ABL','SG')
		print Latin.declineA('bonus','bona','12','M','VOC','SG')
		print Latin.declineA('bonus','bona','12','M','NOM','PL')
		print Latin.declineA('bonus','bona','12','M','GEN','PL')
		print Latin.declineA('bonus','bona','12','M','DAT','PL')
		print Latin.declineA('bonus','bona','12','M','ACC','PL')
		print Latin.declineA('bonus','bona','12','M','ABL','PL')
		print Latin.declineA('bonus','bona','12','M','VOC','PL')
		print("---------")
		print Latin.declineA('bonus','bona','12','N','NOM','SG')
		print Latin.declineA('bonus','bona','12','N','GEN','SG')
		print Latin.declineA('bonus','bona','12','N','DAT','SG')
		print Latin.declineA('bonus','bona','12','N','ACC','SG')
		print Latin.declineA('bonus','bona','12','N','ABL','SG')
		print Latin.declineA('bonus','bona','12','N','VOC','SG')
		print Latin.declineA('bonus','bona','12','N','NOM','PL')
		print Latin.declineA('bonus','bona','12','N','GEN','PL')
		print Latin.declineA('bonus','bona','12','N','DAT','PL')
		print Latin.declineA('bonus','bona','12','N','ACC','PL')
		print Latin.declineA('bonus','bona','12','N','ABL','PL')
		print Latin.declineA('bonus','bona','12','N','VOC','PL')

def testDA3():
	print Latin.declineA('ācer','ācris','3a','F','NOM','SG')
	print Latin.declineA('ācer','ācris','3a','F','GEN','SG')
	print Latin.declineA('ācer','ācris','3a','F','DAT','SG')
	print Latin.declineA('ācer','ācris','3a','F','ACC','SG')
	print Latin.declineA('ācer','ācris','3a','F','ABL','SG')
	print Latin.declineA('ācer','ācris','3a','F','VOC','SG')
	print Latin.declineA('ācer','ācris','3a','F','NOM','PL')
	print Latin.declineA('ācer','ācris','3a','F','GEN','PL')
	print Latin.declineA('ācer','ācris','3a','F','DAT','PL')
	print Latin.declineA('ācer','ācris','3a','F','ACC','PL')
	print Latin.declineA('ācer','ācris','3a','F','ABL','PL')
	print Latin.declineA('ācer','ācris','3a','F','VOC','PL')
	print("---------")
	print Latin.declineA('ācer','ācris','3a','M','NOM','SG')
	print Latin.declineA('ācer','ācris','3a','M','GEN','SG')
	print Latin.declineA('ācer','ācris','3a','M','DAT','SG')
	print Latin.declineA('ācer','ācris','3a','M','ACC','SG')
	print Latin.declineA('ācer','ācris','3a','M','ABL','SG')
	print Latin.declineA('ācer','ācris','3a','M','VOC','SG')
	print Latin.declineA('ācer','ācris','3a','M','NOM','PL')
	print Latin.declineA('ācer','ācris','3a','M','GEN','PL')
	print Latin.declineA('ācer','ācris','3a','M','DAT','PL')
	print Latin.declineA('ācer','ācris','3a','M','ACC','PL')
	print Latin.declineA('ācer','ācris','3a','M','ABL','PL')
	print Latin.declineA('ācer','ācris','3a','M','VOC','PL')
	print("---------")
	print Latin.declineA('ācer','ācris','3a','N','NOM','SG')
	print Latin.declineA('ācer','ācris','3a','N','GEN','SG')
	print Latin.declineA('ācer','ācris','3a','N','DAT','SG')
	print Latin.declineA('ācer','ācris','3a','N','ACC','SG')
	print Latin.declineA('ācer','ācris','3a','N','ABL','SG')
	print Latin.declineA('ācer','ācris','3a','N','VOC','SG')
	print Latin.declineA('ācer','ācris','3a','N','NOM','PL')
	print Latin.declineA('ācer','ācris','3a','N','GEN','PL')
	print Latin.declineA('ācer','ācris','3a','N','DAT','PL')
	print Latin.declineA('ācer','ācris','3a','N','ACC','PL')
	print Latin.declineA('ācer','ācris','3a','N','ABL','PL')
	print Latin.declineA('ācer','ācris','3a','N','VOC','PL')
	print("---------")
	print("---------")
	print Latin.declineA('fēlīx','fēlicis','3b','F','NOM','SG')
	print Latin.declineA('fēlīx','fēlicis','3b','F','GEN','SG')
	print Latin.declineA('fēlīx','fēlicis','3b','F','DAT','SG')
	print Latin.declineA('fēlīx','fēlicis','3b','F','ACC','SG')
	print Latin.declineA('fēlīx','fēlicis','3b','F','ABL','SG')
	print Latin.declineA('fēlīx','fēlicis','3b','F','VOC','SG')
	print Latin.declineA('fēlīx','fēlicis','3b','F','NOM','PL')
	print Latin.declineA('fēlīx','fēlicis','3b','F','GEN','PL')
	print Latin.declineA('fēlīx','fēlicis','3b','F','DAT','PL')
	print Latin.declineA('fēlīx','fēlicis','3b','F','ACC','PL')
	print Latin.declineA('fēlīx','fēlicis','3b','F','ABL','PL')
	print Latin.declineA('fēlīx','fēlicis','3b','F','VOC','PL')
	print("---------")
	print Latin.declineA('fēlīx','fēlicis','3b','M','NOM','SG')
	print Latin.declineA('fēlīx','fēlicis','3b','M','GEN','SG')
	print Latin.declineA('fēlīx','fēlicis','3b','M','DAT','SG')
	print Latin.declineA('fēlīx','fēlicis','3b','M','ACC','SG')
	print Latin.declineA('fēlīx','fēlicis','3b','M','ABL','SG')
	print Latin.declineA('fēlīx','fēlicis','3b','M','VOC','SG')
	print Latin.declineA('fēlīx','fēlicis','3b','M','NOM','PL')
	print Latin.declineA('fēlīx','fēlicis','3b','M','GEN','PL')
	print Latin.declineA('fēlīx','fēlicis','3b','M','DAT','PL')
	print Latin.declineA('fēlīx','fēlicis','3b','M','ACC','PL')
	print Latin.declineA('fēlīx','fēlicis','3b','M','ABL','PL')
	print Latin.declineA('fēlīx','fēlicis','3b','M','VOC','PL')
	print("---------")
	print Latin.declineA('fēlīx','fēlicis','3b','N','NOM','SG')
	print Latin.declineA('fēlīx','fēlicis','3b','N','GEN','SG')
	print Latin.declineA('fēlīx','fēlicis','3b','N','DAT','SG')
	print Latin.declineA('fēlīx','fēlicis','3b','N','ACC','SG')
	print Latin.declineA('fēlīx','fēlicis','3b','N','ABL','SG')
	print Latin.declineA('fēlīx','fēlicis','3b','N','VOC','SG')
	print Latin.declineA('fēlīx','fēlicis','3b','N','NOM','PL')
	print Latin.declineA('fēlīx','fēlicis','3b','N','GEN','PL')
	print Latin.declineA('fēlīx','fēlicis','3b','N','DAT','PL')
	print Latin.declineA('fēlīx','fēlicis','3b','N','ACC','PL')
	print Latin.declineA('fēlīx','fēlicis','3b','N','ABL','PL')
	print Latin.declineA('fēlīx','fēlicis','3b','N','VOC','PL')

def testrevDAPA():
	print Latin.reverseDeclineA('pulchrīs')
	print Latin.reverseDeclineA('bonīs')
	print("---------")
	print Latin.reverseDeclineA('ācribus')
	print Latin.reverseDeclineA('fēlicibus')

def testrevDASA():
	print ("* "); print Latin.reverseDeclineA('pulchrae')
	print Latin.reverseDeclineA('pulchrā')
	print Latin.reverseDeclineA('pulchrō')
	print("---------")
	print Latin.reverseDeclineA('bonā')
	print Latin.reverseDeclineA('bonō')
	print("---------")
	print("---------")
	print Latin.reverseDeclineA('ācrī')
	print Latin.reverseDeclineA('fēlicī')

def testrevGenPA():
	print Latin.reverseDeclineA('pulchrārum')
	print Latin.reverseDeclineA('pulchrōrum')
	print("---------")
	print Latin.reverseDeclineA('bonārum')
	print Latin.reverseDeclineA('bonōrum')
	print("---------")
	print("---------")
	print Latin.reverseDeclineA('ācrium')
	print Latin.reverseDeclineA('fēlicium')

def testrevGenSA():
	print ("* "); print Latin.reverseDeclineA('pulchrae')
	print ("* "); print Latin.reverseDeclineA('pulchrī')
	print Latin.reverseDeclineA('pulchrī','N')
	print("---------")
	print ("* "); print Latin.reverseDeclineA('bonae')
	print ("* "); print Latin.reverseDeclineA('bonī')
	print Latin.reverseDeclineA('bonī','N')
	print("---------")
	print("---------")
	print Latin.reverseDeclineA('ācris')
	print Latin.reverseDeclineA('fēlicis')

def testrevNomAccPA():
	print Latin.reverseDeclineA('pulchrae')
	print Latin.reverseDeclineA('pulchrās')
	print Latin.reverseDeclineA('pulchrī')
	print Latin.reverseDeclineA('pulchrōs')
	print ("* "); print Latin.reverseDeclineA('pulchra')
	print Latin.reverseDeclineA('pulchra','N')
	print("---------")
	print Latin.reverseDeclineA('bonae')
	print Latin.reverseDeclineA('bonās')
	print Latin.reverseDeclineA('bonī')
	print Latin.reverseDeclineA('bonōs')
	print ("* "); print Latin.reverseDeclineA('bona')
	print Latin.reverseDeclineA('bona','N')
	print("---------")
	print("---------")
	print Latin.reverseDeclineA('ācrēs')
	print Latin.reverseDeclineA('fēlicēs')

def testrevAccSA():
	print Latin.reverseDeclineA('pulchram')
	print Latin.reverseDeclineA('pulchrum')
	print Latin.reverseDeclineA('pulchrum','M')
	print("---------")
	print Latin.reverseDeclineA('bonam')
	print Latin.reverseDeclineA('bonum')
	print Latin.reverseDeclineA('bonum','M')
	print("---------")
	print("---------")
	print Latin.reverseDeclineA('ācrem')
	print Latin.reverseDeclineA('ācer')
	print Latin.reverseDeclineA('fēlicem')
	print Latin.reverseDeclineA('fēlīx')

def testrevNomSA():
	print Latin.reverseDeclineA('pulchra')
	print Latin.reverseDeclineA('pulcher')
	print Latin.reverseDeclineA('pulchrum')
	print("---------")
	print Latin.reverseDeclineA('bona')
	print Latin.reverseDeclineA('bonus')
	print Latin.reverseDeclineA('bonum')
	print("---------")
	print("---------")
	print Latin.reverseDeclineA('ācer')
	print Latin.reverseDeclineA('ācris')
	print Latin.reverseDeclineA('ācre')
	print Latin.reverseDeclineA('fēlīx')

# testDA12()
# print("---------")
# testDA3()

# testrevDAPA()
# print("---------")
# testrevDASA()
# print("---------")
# testrevGenPA()
# print("---------")
# testrevGenSA()
# print("---------")
# testrevNomAccPA()
# print("---------")
# testrevAccSA()
# print("---------")
# testrevNomSA()

def testNPpres():
	print('pres')
	print Russian.conjugate('читать','FST','SG','','PRES')
	print Russian.conjugate('читать','SND','SG','','PRES')
	print Russian.conjugate('читать','TRD','SG','','PRES')
	print Russian.conjugate('читать','FST','PL','','PRES')
	print Russian.conjugate('читать','SND','PL','','PRES')
	print Russian.conjugate('читать','TRD','PL','','PRES')
	print('---')
	print Russian.conjugate('жить','FST','SG','','PRES')
	print Russian.conjugate('жить','SND','SG','','PRES')
	print Russian.conjugate('жить','TRD','SG','','PRES')
	print Russian.conjugate('жить','FST','PL','','PRES')
	print Russian.conjugate('жить','SND','PL','','PRES')
	print Russian.conjugate('жить','TRD','PL','','PRES')
	print('---')
	print Russian.conjugate('говорить','FST','SG','','PRES')
	print Russian.conjugate('говорить','SND','SG','','PRES')
	print Russian.conjugate('говорить','TRD','SG','','PRES')
	print Russian.conjugate('говорить','FST','PL','','PRES')
	print Russian.conjugate('говорить','SND','PL','','PRES')
	print Russian.conjugate('говорить','TRD','PL','','PRES')
	print('---')
	print Russian.conjugate('учить','FST','SG','','PRES')
	print Russian.conjugate('учить','SND','SG','','PRES')
	print Russian.conjugate('учить','TRD','SG','','PRES')
	print Russian.conjugate('учить','FST','PL','','PRES')
	print Russian.conjugate('учить','SND','PL','','PRES')
	print Russian.conjugate('учить','TRD','PL','','PRES')

def testNPpresO():
	print ('pres other inf')
	print Russian.conjugate('прочитать','FST','SG','','PRES')
	print Russian.conjugate('прочитать','SND','SG','','PRES')
	print Russian.conjugate('прочитать','TRD','SG','','PRES')
	print Russian.conjugate('прочитать','FST','PL','','PRES')
	print Russian.conjugate('прочитать','SND','PL','','PRES')
	print Russian.conjugate('прочитать','TRD','PL','','PRES')
	print('---')
	print Russian.conjugate('прожить','FST','SG','','PRES')
	print Russian.conjugate('прожить','SND','SG','','PRES')
	print Russian.conjugate('прожить','TRD','SG','','PRES')
	print Russian.conjugate('прожить','FST','PL','','PRES')
	print Russian.conjugate('прожить','SND','PL','','PRES')
	print Russian.conjugate('прожить','TRD','PL','','PRES')
	print('---')
	print Russian.conjugate('сказать','FST','SG','','PRES')
	print Russian.conjugate('сказать','SND','SG','','PRES')
	print Russian.conjugate('сказать','TRD','SG','','PRES')
	print Russian.conjugate('сказать','FST','PL','','PRES')
	print Russian.conjugate('сказать','SND','PL','','PRES')
	print Russian.conjugate('сказать','TRD','PL','','PRES')
	print('---')
	print Russian.conjugate('обучить','FST','SG','','PRES')
	print Russian.conjugate('обучить','SND','SG','','PRES')
	print Russian.conjugate('обучить','TRD','SG','','PRES')
	print Russian.conjugate('обучить','FST','PL','','PRES')
	print Russian.conjugate('обучить','SND','PL','','PRES')
	print Russian.conjugate('обучить','TRD','PL','','PRES')

def testNPfutp():
	print('future perf')
	print Russian.conjugate('прочитать','FST','SG','','FUTP')
	print Russian.conjugate('прочитать','SND','SG','','FUTP')
	print Russian.conjugate('прочитать','TRD','SG','','FUTP')
	print Russian.conjugate('прочитать','FST','PL','','FUTP')
	print Russian.conjugate('прочитать','SND','PL','','FUTP')
	print Russian.conjugate('прочитать','TRD','PL','','FUTP')
	print('---')
	print Russian.conjugate('прожить','FST','SG','','FUTP')
	print Russian.conjugate('прожить','SND','SG','','FUTP')
	print Russian.conjugate('прожить','TRD','SG','','FUTP')
	print Russian.conjugate('прожить','FST','PL','','FUTP')
	print Russian.conjugate('прожить','SND','PL','','FUTP')
	print Russian.conjugate('прожить','TRD','PL','','FUTP')
	print('---')
	print Russian.conjugate('сказать','FST','SG','','FUTP')
	print Russian.conjugate('сказать','SND','SG','','FUTP')
	print Russian.conjugate('сказать','TRD','SG','','FUTP')
	print Russian.conjugate('сказать','FST','PL','','FUTP')
	print Russian.conjugate('сказать','SND','PL','','FUTP')
	print Russian.conjugate('сказать','TRD','PL','','FUTP')
	print('---')
	print Russian.conjugate('обучить','FST','SG','','FUTP')
	print Russian.conjugate('обучить','SND','SG','','FUTP')
	print Russian.conjugate('обучить','TRD','SG','','FUTP')
	print Russian.conjugate('обучить','FST','PL','','FUTP')
	print Russian.conjugate('обучить','SND','PL','','FUTP')
	print Russian.conjugate('обучить','TRD','PL','','FUTP')

def testNPfutpO():
	print ('future perf other inf')
	print Russian.conjugate('читать','FST','SG','','FUTP')
	print Russian.conjugate('читать','SND','SG','','FUTP')
	print Russian.conjugate('читать','TRD','SG','','FUTP')
	print Russian.conjugate('читать','FST','PL','','FUTP')
	print Russian.conjugate('читать','SND','PL','','FUTP')
	print Russian.conjugate('читать','TRD','PL','','FUTP')
	print('---')
	print Russian.conjugate('жить','FST','SG','','FUTP')
	print Russian.conjugate('жить','SND','SG','','FUTP')
	print Russian.conjugate('жить','TRD','SG','','FUTP')
	print Russian.conjugate('жить','FST','PL','','FUTP')
	print Russian.conjugate('жить','SND','PL','','FUTP')
	print Russian.conjugate('жить','TRD','PL','','FUTP')
	print('---')
	print Russian.conjugate('говорить','FST','SG','','FUTP')
	print Russian.conjugate('говорить','SND','SG','','FUTP')
	print Russian.conjugate('говорить','TRD','SG','','FUTP')
	print Russian.conjugate('говорить','FST','PL','','FUTP')
	print Russian.conjugate('говорить','SND','PL','','FUTP')
	print Russian.conjugate('говорить','TRD','PL','','FUTP')
	print('---')
	print Russian.conjugate('учить','FST','SG','','FUTP')
	print Russian.conjugate('учить','SND','SG','','FUTP')
	print Russian.conjugate('учить','TRD','SG','','FUTP')
	print Russian.conjugate('учить','FST','PL','','FUTP')
	print Russian.conjugate('учить','SND','PL','','FUTP')
	print Russian.conjugate('учить','TRD','PL','','FUTP')

def testPimpf():
	print('imperf')
	print Russian.conjugate('читать','','SG','M','IMPF')
	print Russian.conjugate('читать','','SG','F','IMPF')
	print Russian.conjugate('читать','','SG','N','IMPF')
	print Russian.conjugate('читать','','PL','M','IMPF')
	print Russian.conjugate('читать','','PL','F','IMPF')
	print Russian.conjugate('читать','','PL','N','IMPF')
	print('---')
	print Russian.conjugate('жить','','SG','M','IMPF')
	print Russian.conjugate('жить','','SG','F','IMPF')
	print Russian.conjugate('жить','','SG','N','IMPF')
	print Russian.conjugate('жить','','PL','M','IMPF')
	print Russian.conjugate('жить','','PL','F','IMPF')
	print Russian.conjugate('жить','','PL','N','IMPF')
	print('---')
	print Russian.conjugate('говорить','','SG','M','IMPF')
	print Russian.conjugate('говорить','','SG','F','IMPF')
	print Russian.conjugate('говорить','','SG','N','IMPF')
	print Russian.conjugate('говорить','','PL','M','IMPF')
	print Russian.conjugate('говорить','','PL','F','IMPF')
	print Russian.conjugate('говорить','','PL','N','IMPF')
	print('---')
	print Russian.conjugate('учить','','SG','M','IMPF')
	print Russian.conjugate('учить','','SG','F','IMPF')
	print Russian.conjugate('учить','','SG','N','IMPF')
	print Russian.conjugate('учить','','PL','M','IMPF')
	print Russian.conjugate('учить','','PL','F','IMPF')
	print Russian.conjugate('учить','','PL','N','IMPF')

def testPimpfO():
	print('imperf other')
	print Russian.conjugate('прочитать','','SG','M','IMPF')
	print Russian.conjugate('прочитать','','SG','F','IMPF')
	print Russian.conjugate('прочитать','','SG','N','IMPF')
	print Russian.conjugate('прочитать','','PL','M','IMPF')
	print Russian.conjugate('прочитать','','PL','F','IMPF')
	print Russian.conjugate('прочитать','','PL','N','IMPF')
	print('---')
	print Russian.conjugate('прожить','','SG','M','IMPF')
	print Russian.conjugate('прожить','','SG','F','IMPF')
	print Russian.conjugate('прожить','','SG','N','IMPF')
	print Russian.conjugate('прожить','','PL','M','IMPF')
	print Russian.conjugate('прожить','','PL','F','IMPF')
	print Russian.conjugate('прожить','','PL','N','IMPF')
	print('---')
	print Russian.conjugate('сказать','','SG','M','IMPF')
	print Russian.conjugate('сказать','','SG','F','IMPF')
	print Russian.conjugate('сказать','','SG','N','IMPF')
	print Russian.conjugate('сказать','','PL','M','IMPF')
	print Russian.conjugate('сказать','','PL','F','IMPF')
	print Russian.conjugate('сказать','','PL','N','IMPF')
	print('---')
	print Russian.conjugate('обучить','','SG','M','IMPF')
	print Russian.conjugate('обучить','','SG','F','IMPF')
	print Russian.conjugate('обучить','','SG','N','IMPF')
	print Russian.conjugate('обучить','','PL','M','IMPF')
	print Russian.conjugate('обучить','','PL','F','IMPF')
	print Russian.conjugate('обучить','','PL','N','IMPF')
	print Russian.conjugate('обучить','','PL','N','IMPF')

def testPperf():
	print('perf')
	print Russian.conjugate('прочитать','','SG','M','PERF')
	print Russian.conjugate('прочитать','','SG','F','PERF')
	print Russian.conjugate('прочитать','','SG','N','PERF')
	print Russian.conjugate('прочитать','','PL','M','PERF')
	print Russian.conjugate('прочитать','','PL','F','PERF')
	print Russian.conjugate('прочитать','','PL','N','PERF')
	print('---')
	print Russian.conjugate('прожить','','SG','M','PERF')
	print Russian.conjugate('прожить','','SG','F','PERF')
	print Russian.conjugate('прожить','','SG','N','PERF')
	print Russian.conjugate('прожить','','PL','M','PERF')
	print Russian.conjugate('прожить','','PL','F','PERF')
	print Russian.conjugate('прожить','','PL','N','PERF')
	print('---')
	print Russian.conjugate('сказать','','SG','M','PERF')
	print Russian.conjugate('сказать','','SG','F','PERF')
	print Russian.conjugate('сказать','','SG','N','PERF')
	print Russian.conjugate('сказать','','PL','M','PERF')
	print Russian.conjugate('сказать','','PL','F','PERF')
	print Russian.conjugate('сказать','','PL','N','PERF')
	print('---')
	print Russian.conjugate('обучить','','SG','M','PERF')
	print Russian.conjugate('обучить','','SG','F','PERF')
	print Russian.conjugate('обучить','','SG','N','PERF')
	print Russian.conjugate('обучить','','PL','M','PERF')
	print Russian.conjugate('обучить','','PL','F','PERF')
	print Russian.conjugate('обучить','','PL','N','PERF')

def testPperfO():
	print('perf other')
	print Russian.conjugate('читать','','SG','M','PERF')
	print Russian.conjugate('читать','','SG','F','PERF')
	print Russian.conjugate('читать','','SG','N','PERF')
	print Russian.conjugate('читать','','PL','M','PERF')
	print Russian.conjugate('читать','','PL','F','PERF')
	print Russian.conjugate('читать','','PL','N','PERF')
	print('---')
	print Russian.conjugate('жить','','SG','M','PERF')
	print Russian.conjugate('жить','','SG','F','PERF')
	print Russian.conjugate('жить','','SG','N','PERF')
	print Russian.conjugate('жить','','PL','M','PERF')
	print Russian.conjugate('жить','','PL','F','PERF')
	print Russian.conjugate('жить','','PL','N','PERF')
	print('---')
	print Russian.conjugate('говорить','','SG','M','PERF')
	print Russian.conjugate('говорить','','SG','F','PERF')
	print Russian.conjugate('говорить','','SG','N','PERF')
	print Russian.conjugate('говорить','','PL','M','PERF')
	print Russian.conjugate('говорить','','PL','F','PERF')
	print Russian.conjugate('говорить','','PL','N','PERF')
	print('---')
	print Russian.conjugate('учить','','SG','M','PERF')
	print Russian.conjugate('учить','','SG','F','PERF')
	print Russian.conjugate('учить','','SG','N','PERF')
	print Russian.conjugate('учить','','PL','M','PERF')
	print Russian.conjugate('учить','','PL','F','PERF')
	print Russian.conjugate('учить','','PL','N','PERF')

def testF():
	print('future imperf')
	print Russian.conjugate('читать','FST','SG','','FUTR')
	print Russian.conjugate('читать','SND','SG','','FUTR')
	print Russian.conjugate('читать','TRD','SG','','FUTR')
	print Russian.conjugate('читать','FST','PL','','FUTR')
	print Russian.conjugate('читать','SND','PL','','FUTR')
	print Russian.conjugate('читать','TRD','PL','','FUTR')
	print('---')
	print Russian.conjugate('жить','FST','SG','','FUTR')
	print Russian.conjugate('жить','SND','SG','','FUTR')
	print Russian.conjugate('жить','TRD','SG','','FUTR')
	print Russian.conjugate('жить','FST','PL','','FUTR')
	print Russian.conjugate('жить','SND','PL','','FUTR')
	print Russian.conjugate('жить','TRD','PL','','FUTR')
	print('---')
	print Russian.conjugate('говорить','FST','SG','','FUTR')
	print Russian.conjugate('говорить','SND','SG','','FUTR')
	print Russian.conjugate('говорить','TRD','SG','','FUTR')
	print Russian.conjugate('говорить','FST','PL','','FUTR')
	print Russian.conjugate('говорить','SND','PL','','FUTR')
	print Russian.conjugate('говорить','TRD','PL','','FUTR')
	print('---')
	print Russian.conjugate('учить','FST','SG','','FUTR')
	print Russian.conjugate('учить','SND','SG','','FUTR')
	print Russian.conjugate('учить','TRD','SG','','FUTR')
	print Russian.conjugate('учить','FST','PL','','FUTR')
	print Russian.conjugate('учить','SND','PL','','FUTR')
	print Russian.conjugate('учить','TRD','PL','','FUTR')

def testFO():
	print('future imperf other')
	print Russian.conjugate('прочитать','FST','SG','','FUTR')
	print Russian.conjugate('прочитать','SND','SG','','FUTR')
	print Russian.conjugate('прочитать','TRD','SG','','FUTR')
	print Russian.conjugate('прочитать','FST','PL','','FUTR')
	print Russian.conjugate('прочитать','SND','PL','','FUTR')
	print Russian.conjugate('прочитать','TRD','PL','','FUTR')
	print('---')
	print Russian.conjugate('прожить','FST','SG','','FUTR')
	print Russian.conjugate('прожить','SND','SG','','FUTR')
	print Russian.conjugate('прожить','TRD','SG','','FUTR')
	print Russian.conjugate('прожить','FST','PL','','FUTR')
	print Russian.conjugate('прожить','SND','PL','','FUTR')
	print Russian.conjugate('прожить','TRD','PL','','FUTR')
	print('---')
	print Russian.conjugate('сказать','FST','SG','','FUTR')
	print Russian.conjugate('сказать','SND','SG','','FUTR')
	print Russian.conjugate('сказать','TRD','SG','','FUTR')
	print Russian.conjugate('сказать','FST','PL','','FUTR')
	print Russian.conjugate('сказать','SND','PL','','FUTR')
	print Russian.conjugate('сказать','TRD','PL','','FUTR')
	print('---')
	print Russian.conjugate('обучить','FST','SG','','FUTR')
	print Russian.conjugate('обучить','SND','SG','','FUTR')
	print Russian.conjugate('обучить','TRD','SG','','FUTR')
	print Russian.conjugate('обучить','FST','PL','','FUTR')
	print Russian.conjugate('обучить','SND','PL','','FUTR')
	print Russian.conjugate('обучить','TRD','PL','','FUTR')

# testNPpres()
# print("---------")
# testNPpresO()
# print("---------")
# testNPfutp()
# print("---------")
# testNPfutpO()
# testPimpf()
# print("---------")
# testPimpfO()
# print("---------")
# testPperf()
# print("---------")
# testPperfO()
# # print("---------")
# testF()
# print("---------")
# testFO()